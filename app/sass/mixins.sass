// responsive example, edit or remove
$breaksmall: 500px

$breaklarge: 1180px

=r($media)
	@if $media == pda
		// narrower than $width
		@media only screen and (max-width: $breaksmall)
			@content
	@else if $media == wide
		// wider than $width
		@media only screen and (min-width: $breaklarge)
			@content

=fs($sizeValue: 16)
	font-size: $sizeValue + px
	font-size: $sizeValue / 10 + rem

=text-overflow
	overflow: hidden
	-ms-text-overflow: ellipsis
	text-overflow: ellipsis
	white-space: nowrap

=cover
	background-repeat: no-repeat
	background-size: cover
	background-position: 50% 50%

// retina bg
=retina
	@media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2)
		@content

=box
	+box-sizing(border-box)

//simple gradient
=g($color1, $color2)
	+background-image(linear-gradient($color1, $color2))

=gh($color1, $color2)
	+background-image(linear-gradient(left, $color1, $color2))

//asdfast font-family
=font($alias, $name)
	@font-face
		font-family: $alias
		src: url("fonts/" + $name + ".eot")
		src: url("fonts/" + $name + ".eot?#iefix") format("embedded-opentype"), url("fonts/" + $name + ".woff") format("woff"), url("fonts/" + $name + ".ttf") format("truetype")
		font-weight: normal
		font-style: normal

//+font(black, cytiapro-black-webfont)

// ROTATE
=rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0)
	-moz-transform: rotate($deg + deg)
	-o-transform: rotate($deg + deg)
	-webkit-transform: rotate($deg + deg)
	-ms-transform: rotate($deg + deg)
	transform: rotate($deg + deg)
	filter: progid:DXImageTransform.Microsoft.Matrix(M11=$m11, M12=$m12,M21=$m21, M22=$m22, sizingMethod='auto expand')
	zoom: 1

// TRANSITION
=transition($what)
	-moz-transition: $what
	-o-transition: $what
	-webkit-transition: $what
	-ms-transition: $what
	transition: $what

=tr($what)
	+transition($what)

=hide-text
	font: 0/0 a
	text-shadow: none
	color: transparent

=hidetext
	+hide-text

=clr
	&:after
		content: " "
		display: table
		clear: both
	*zoom: 1

=placeholder-color($color)
	&:-moz-placeholder
		color: $color
	&::-webkit-input-placeholder
		color: $color

=placeholder
	&:-ms-input-placeholder
		@content
	&:-moz-placeholder
		@content
	&::-moz-placeholder
		@content
	&::-webkit-input-placeholder
		@content
	&::placeholder
		@content

=phc($color)
	&::-webkit-input-placeholder
		color: $color !important
		opacity: 1 !important
	&::-moz-placeholder
		color: $color !important
		opacity: 1 !important
	&:-moz-placeholder
		color: $color !important
		opacity: 1 !important
	&:-ms-input-placeholder
		color: $color !important
		opacity: 1 !important
		
=gray
	filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0'/></filter></svg>#grayscale")
	// Firefox 10+
	filter: gray
	// IE6-9
	-webkit-filter: grayscale(100%)
	// Chrome 19+ & Safari 6+
	filter: progid:DXImageTransform.Microsoft.BasicImage(grayScale=1)
	-ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayScale=1)"

=gray-half
	filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='saturate' values='0.5'/></filter></svg>#grayscale")
	// Firefox 10+
	filter: gray alpha(opacity = 50)
	// IE6-9
	-webkit-filter: grayscale(50%)
	// Chrome 19+ & Safari 6+

=gray-zero
	filter: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0'/></filter></svg>#grayscale")
	-webkit-filter: grayscale(0%)

=unselectable
	-webkit-touch-callout: none
	-webkit-user-select: none
	-khtml-user-select: none
	-moz-user-select: none
	-ms-user-select: none
	user-select: none

=nosel
	+unselectable

=prevent-text
	-ms-word-break: break-all
	word-break: break-all
	word-break: break-word
	-webkit-hyphens: auto
	-moz-hyphens: auto
	hyphens: auto

=font-smoothing($val: antialiased)
	-webkit-font-smoothing: $val
	-moz-font-smoothing: $val
	-ms-font-smoothing: $val
	-o-font-smoothing: $val

=selection
	& ::selection
		@content
	& ::-moz-selection
		@content

=sel
	+selection

=gpu
	+transform(translate3d(0, 0, 0))

=smooth-triangle
	-webkit-transform: rotate(0.05deg)
	-moz-transform: scale(1.1)
	-o-transform: rotate(0.05deg)
	transform: rotate(0.05deg)

=scrollbar
	& ::-moz-scrollbar
		@content
	& ::-webkit-scrollbar
		@content
	& ::scrollbar
		@content

=scrollbar-track
	& ::-moz-scrollbar-track
		@content
	& ::-webkit-scrollbar-track
		@content
	& ::scrollbar-track
		@content

=scrollbar-thumb
	& ::-moz-scrollbar-thumb
		@content
	& ::-webkit-scrollbar-thumb
		@content
	& ::scrollbar-thumb
		@content

=scrollbar-track-piece
	& ::-moz-scrollbar-track-piece
		@content
	& ::-webkit-scrollbar-track-piece
		@content
	& ::scrollbar-track-piece
		@content

//triangle
=arr($width, $height, $bg, $direction)
	width: 0px
	height: 0px
	border-style: solid
	@if $direction == t
		border-width: 0 $width / 2 + px $height + px $width / 2 + px
		border-color: transparent transparent $bg transparent
	@if $direction == r
		border-width: $height / 2 + px 0 $height / 2 + px $width + px
		border-color: transparent transparent transparent $bg
	@if $direction == b
		border-width: $height + px $width / 2 + px 0 $width / 2 + px
		border-color: $bg transparent transparent transparent
	@if $direction == l
		border-width: $height / 2 + px $width + px $height / 2 + px 0
		border-color: transparent $bg transparent transparent
	@if $direction == tl
		border-width: $height + px $width + px 0 0
		border-color: $bg transparent transparent transparent
	@if $direction == tr
		border-width: 0 $width + px $height + px 0
		border-color: transparent $bg transparent transparent
	@if $direction == br
		border-width: 0 0 $height + px $width + px
		border-color: transparent transparent $bg transparent
	@if $direction == bl
		border-width: $width + px 0 0 $height + px
		border-color: transparent transparent transparent $bg
		
=trans($property:all,$duration:0.5s,$effect:ease,$delay:0s)
	-webkit-transition: $property $duration $effect $delay
	-moz-transition: $property $duration $effect $delay
	-o-transition: $property $duration $effect $delay
	transition: $property $duration $effect $delay
// example
// +arr(500,50, #000, l)
// +arr(500,50, #000, bl)



$icons: sprite-map("icons/*.png", $position: 0, $spacing: 5px, $repeat: no-repeat)
$icons-2x: sprite-map("icons-2x/*.png", $position: 0, $spacing: 10px, $repeat: no-repeat)
 
 
=sprite($sprite, $pos: "static", $type: "all") 
	@if $type != "retina"
		background-image: sprite-url($icons)
		background-position: sprite-position($icons, $sprite)
		background-repeat: no-repeat
		overflow: hidden
		display: inline-block
		height: ceil(image-height(sprite-file($icons, $sprite)))
		width: ceil(image-width(sprite-file($icons, $sprite)))
		@if $pos == "abs_middle"
			position: absolute
			top: 50%
			left: 50%
			margin-top: -(image-height(sprite-file($icons, $sprite))/2)
			margin-left: -(image-width(sprite-file($icons, $sprite))/2)

		@media (-webkit-min-device-pixel-ratio:1.5),(min--moz-device-pixel-ratio:1.5),(-o-min-device-pixel-ratio:3/2),(min-resolution:1.5dppx)
			background-image: sprite-url($icons-2x)
			background-size: ceil(image-width(sprite-path($icons-2x)) / 2) auto
			background-position: round(nth(sprite-position($icons-2x, $sprite), 1) / 2) round(nth(sprite-position($icons-2x, $sprite), 2) / 2)
			height: ceil(image-height(sprite-file($icons-2x, $sprite)) / 2)
			width: ceil(image-width(sprite-file($icons-2x, $sprite)) / 2)
			@if $pos == "abs_middle"
				position: absolute
				top: 50%
				left: 50%
				margin-top: -(image-height(sprite-file($icons-2x, $sprite)) / 2) / 2
				margin-left: -(image-width(sprite-file($icons-2x, $sprite)) / 2) / 2
	@else
		background-image: sprite-url($icons-2x)
		background-size: ceil(image-width(sprite-path($icons-2x)) / 2) auto
		background-position: round(nth(sprite-position($icons-2x, $sprite), 1) / 2) round(nth(sprite-position($icons-2x, $sprite), 2) / 2)
		height: ceil(image-height(sprite-file($icons-2x, $sprite)) / 2)
		width: ceil(image-width(sprite-file($icons-2x, $sprite)) / 2)
		@if $pos == "abs_middle"
			position: absolute
			top: 50%
			left: 50%
			margin-top: -(image-height(sprite-file($icons-2x, $sprite)) / 2) / 2
			margin-left: -(image-width(sprite-file($icons-2x, $sprite)) / 2) / 2


=s($sprite, $pos: "static") 
	background-image: sprite-url($icons)
	background-position: sprite-position($icons, $sprite)
	background-repeat: no-repeat
	overflow: hidden
	display: inline-block
	height: ceil(image-height(sprite-file($icons, $sprite)))
	width: ceil(image-width(sprite-file($icons, $sprite)))
	@if $pos == "abs_middle"
		position: absolute
		top: 50%
		left: 50%
		margin-top: -(image-height(sprite-file($icons, $sprite))/2)
		margin-left: -(image-width(sprite-file($icons, $sprite))/2)



=retina-bg($normal, $retina, $contain: false)
	background-image: image-url($normal)

	@media (-webkit-min-device-pixel-ratio: 1.5), (min-resolution: 1.5dppx)
		background-image: image-url($retina)

	@if $contain == true
		background-size: contain
	@else
		background-size: (image-width($retina) / 2) (image-height($retina) / 2)
